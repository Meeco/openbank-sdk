/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE Ltd. 2011 - 2016. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v3.0.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import '../rxjs-operators';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
var Func_2_0_0Service = (function () {
    function Func_2_0_0Service(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://apc.openbankproject.com/obp/v3.0.0';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    Func_2_0_0Service.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    Func_2_0_0Service.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    /**
     * <p>Create Entitlement. Grant Role to User.</p><p>Entitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)</p><p>For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. \"bank_id\":\"\"</p><p>For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. \"bank_id\":\"my-bank-id\"</p><p>Authentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.</p>
     * @summary Add Entitlement for a User.
     * @param body BANK_BODY
     * @param USER_ID The user id
     */
    Func_2_0_0Service.prototype.func200AddEntitlement = function (body, USER_ID, extraHttpRequestParams) {
        return this.func200AddEntitlementWithHttpInfo(body, USER_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status.</p>
     * @summary Add KYC Check
     * @param body BANK_BODY
     * @param KYC_CHECK_ID The kyc check id
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycCheck = function (body, KYC_CHECK_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200AddKycCheckWithHttpInfo(body, KYC_CHECK_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc. </p>
     * @summary Add KYC Document.
     * @param body BANK_BODY
     * @param KYC_DOCUMENT_ID The kyc document id
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycDocument = function (body, KYC_DOCUMENT_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200AddKycDocumentWithHttpInfo(body, KYC_DOCUMENT_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc.</p>
     * @summary Add KYC Media.
     * @param body BANK_BODY
     * @param KYC_MEDIA_ID The kyc media id
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycMedia = function (body, KYC_MEDIA_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200AddKycMediaWithHttpInfo(body, KYC_MEDIA_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer</p>
     * @summary Add KYC Status
     * @param body BANK_BODY
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycStatus = function (body, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200AddKycStatusWithHttpInfo(body, CUSTOMER_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add a social media handle for the customer specified by CUSTOMER_ID.</p>
     * @summary Add Social Media Handle
     * @param body BANK_BODY
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddSocialMediaHandle = function (body, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200AddSocialMediaHandleWithHttpInfo(body, CUSTOMER_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get accounts at one bank that the user has access to (Authenticated + Anonymous access). Returns the list of accounts at BANK_ID that the user has access to. For each account the API returns the account ID and the available views.</p><p>If the user is not authenticated, the list will contain only the accounts providing public views. Authentication is Optional</p>
     * @summary Get Accounts at one Bank (Public and Private).
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AllAccountsAtOneBank = function (BANK_ID, extraHttpRequestParams) {
        return this.func200AllAccountsAtOneBankWithHttpInfo(BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Create Meeting: Initiate a video conference/call with the bank.</p><p>The Meetings resource contains meta data about video/other conference sessions, not the video/audio/chat itself.</p><p>The actual conferencing is handled by external providers. Currently OBP supports tokbox video conferences (WIP).</p><p>This is not a recomendation of tokbox per se.</p><p>provider_id determines the provider of the meeting / video chat service. MUST be url friendly (no spaces).</p><p>purpose_id explains the purpose of the chat. onboarding | mortgage | complaint etc. MUST be url friendly (no spaces).</p><p>Login is required.</p><p>This call is <strong>experimental</strong>. Currently staff_user_id is not set. Further calls will be needed to correctly set this.</p>
     * @summary Create Meeting (video conference/call)
     * @param body BANK_BODY
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200CreateMeeting = function (body, BANK_ID, extraHttpRequestParams) {
        return this.func200CreateMeetingWithHttpInfo(body, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Creates OBP user.  No authorisation (currently) required.</p><p>Mimics current webform to Register.</p><p>Requires username(email) and password.</p><p>Returns 409 error if username not unique.</p><p>May require validation of email address.</p>
     * @summary Create User.
     * @param body BANK_BODY
     */
    Func_2_0_0Service.prototype.func200CreateUser = function (body, extraHttpRequestParams) {
        return this.func200CreateUserWithHttpInfo(body, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Link a User to a Customer</p><p>Authentication is Mandatory</p><p>CanCreateUserCustomerLink OR CanCreateUserCustomerLinkAtAnyBank entitlements are required.</p>
     * @summary Create User Customer Link.
     * @param body BANK_BODY
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200CreateUserCustomerLinks = function (body, BANK_ID, extraHttpRequestParams) {
        return this.func200CreateUserCustomerLinksWithHttpInfo(body, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Delete Entitlement specified by ENTITLEMENT_ID for an user specified by USER_ID</p><p>Authentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.</p>
     * @summary Delete Entitlement
     * @param ENTITLEMENT_ID The entitblement id
     * @param USER_ID The user id
     */
    Func_2_0_0Service.prototype.func200DeleteEntitlement = function (ENTITLEMENT_ID, USER_ID, extraHttpRequestParams) {
        return this.func200DeleteEntitlementWithHttpInfo(ENTITLEMENT_ID, USER_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Login is required.</p>
     * @summary Get all Entitlements
     */
    Func_2_0_0Service.prototype.func200GetAllEntitlements = function (extraHttpRequestParams) {
        return this.func200GetAllEntitlementsWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get the logged in user</p><p>Login is required.</p>
     * @summary Get User (Current)
     */
    Func_2_0_0Service.prototype.func200GetCurrentUser = function (extraHttpRequestParams) {
        return this.func200GetCurrentUserWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Login is required.</p>
     * @summary Get Entitlements specified by USER_ID
     * @param USER_ID The user id
     */
    Func_2_0_0Service.prototype.func200GetEntitlements = function (USER_ID, extraHttpRequestParams) {
        return this.func200GetEntitlementsWithHttpInfo(USER_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get KYC checks for the logged in customer Messages sent to the currently authenticated user.</p><p>Authentication is Mandatory</p>
     * @summary Get KYC Checks for current Customer
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycChecks = function (CUSTOMER_ID, extraHttpRequestParams) {
        return this.func200GetKycChecksWithHttpInfo(CUSTOMER_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get KYC (know your customer) documents for a customer Get a list of documents that affirm the identity of the customer Passport, driving licence etc. Authentication is Optional</p>
     * @summary Get KYC Documents for Customer
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycDocuments = function (CUSTOMER_ID, extraHttpRequestParams) {
        return this.func200GetKycDocumentsWithHttpInfo(CUSTOMER_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get KYC media (scans, pictures, videos) that affirms the identity of the customer.</p><p>Authentication is Mandatory</p>
     * @summary Get KYC Media for a customer
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycMedia = function (CUSTOMER_ID, extraHttpRequestParams) {
        return this.func200GetKycMediaWithHttpInfo(CUSTOMER_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get the KYC statuses for a customer over time</p><p>Authentication is Mandatory</p>
     * @summary Get the KYC statuses for a customer
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycStatuses = function (CUSTOMER_ID, extraHttpRequestParams) {
        return this.func200GetKycStatusesWithHttpInfo(CUSTOMER_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get Meeting specified by BANK_ID / MEETING_ID Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p>
     * @summary Get Meeting
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetMeeting = function (BANK_ID, extraHttpRequestParams) {
        return this.func200GetMeetingWithHttpInfo(BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.</p><p>The actual conference/chats are handled by external services.</p><p>Login is required.</p><p>This call is <strong>experimental</strong> and will require further authorisation in the future.</p>
     * @summary Get Meetings
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetMeetings = function (BANK_ID, extraHttpRequestParams) {
        return this.func200GetMeetingsWithHttpInfo(BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the list of the views at BANK_ID for account ACCOUNT_ID that a USER_ID at their provider PROVIDER_ID has access to. All url parameters must be <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\">%-encoded</a>, which is often especially relevant for USER_ID and PROVIDER_ID.</p><p>OAuth authentication is required and the user needs to have access to the owner view.</p>
     * @summary Get access for specific user.
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetPermissionForUserForBankAccount = function (PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200GetPermissionForUserForBankAccountWithHttpInfo(PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the list of the permissions at BANK_ID for account ACCOUNT_ID, with each time a pair composed of the user and the views that he has access to.</p><p>OAuth authentication is required and the user needs to have access to the owner view.</p>
     * @summary Get access.
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetPermissionsForBankAccount = function (ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200GetPermissionsForBankAccountWithHttpInfo(ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get social media handles for a customer.</p><p>Authentication is Mandatory</p>
     * @summary Get social media handles for a customer
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetSocialMediaHandles = function (CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        return this.func200GetSocialMediaHandlesWithHttpInfo(CUSTOMER_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get Transaction Types for the bank specified by BANK_ID:</p><p>Lists the possible Transaction Types available at the bank (as opposed to Transaction Request Types which are the possible ways Transactions can be created by this API Server).</p><ul>  <li>id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.</li>  <li>bank_id : The bank that supports this TransactionType</li>  <li>short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here</li>  <li>summary : A succinct summary</li>  <li>description : A longer description</li>  <li>charge : The charge to the customer for each one of these</li></ul><p>Authentication is Optional</p>
     * @summary Get Transaction Types offered by the bank
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetTransactionTypes = function (BANK_ID, extraHttpRequestParams) {
        return this.func200GetTransactionTypesWithHttpInfo(BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the list of private (non-public) accounts at BANK_ID that the user has access to. For each account the API returns the ID and the available views.</p><p>If you want to see more information on the Views, use the Account Detail call. If you want less information about the account, use the /my accounts call</p><p>Authentication is Mandatory</p>
     * @summary Get private accounts at one bank (Authenticated access).
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200PrivateAccountsAtOneBank = function (BANK_ID, extraHttpRequestParams) {
        return this.func200PrivateAccountsAtOneBankWithHttpInfo(BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get public accounts at all banks (Anonymous access). Returns accounts that contain at least one public view (a view where is_public is true) For each account the API returns the ID and the available views.</p><p>Authentication is Optional</p>
     * @summary Get Public Accounts at all Banks.
     */
    Func_2_0_0Service.prototype.func200PublicAccountsAllBanks = function (extraHttpRequestParams) {
        return this.func200PublicAccountsAllBanksWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns a list of the public accounts (Anonymous access) at BANK_ID. For each account the API returns the ID and the available views.</p><p>Authentication via OAuth is not required.</p>
     * @summary Get Accounts at Bank (Public)
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200PublicAccountsAtOneBank = function (BANK_ID, extraHttpRequestParams) {
        return this.func200PublicAccountsAtOneBankWithHttpInfo(BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Add Entitlement for a User.
     * &lt;p&gt;Create Entitlement. Grant Role to User.&lt;/p&gt;&lt;p&gt;Entitlements are used to grant System or Bank level roles to Users. (For Account level privileges, see Views)&lt;/p&gt;&lt;p&gt;For a System level Role (.e.g CanGetAnyUser), set bank_id to an empty string i.e. \&quot;bank_id\&quot;:\&quot;\&quot;&lt;/p&gt;&lt;p&gt;For a Bank level Role (e.g. CanCreateAccount), set bank_id to a valid value e.g. \&quot;bank_id\&quot;:\&quot;my-bank-id\&quot;&lt;/p&gt;&lt;p&gt;Authentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.&lt;/p&gt;
     * @param body BANK_BODY
     * @param USER_ID The user id
     */
    Func_2_0_0Service.prototype.func200AddEntitlementWithHttpInfo = function (body, USER_ID, extraHttpRequestParams) {
        var path = this.basePath + '/users/${USER_ID}/entitlements'
            .replace('${' + 'USER_ID' + '}', String(USER_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200AddEntitlement.');
        }
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func200AddEntitlement.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add KYC Check
     * &lt;p&gt;Add a KYC check for the customer specified by CUSTOMER_ID. KYC Checks store details of checks on a customer made by the KYC team, their comments and a satisfied status.&lt;/p&gt;
     * @param body BANK_BODY
     * @param KYC_CHECK_ID The kyc check id
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycCheckWithHttpInfo = function (body, KYC_CHECK_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/customers/${CUSTOMER_ID}/kyc_check/${KYC_CHECK_ID}'
            .replace('${' + 'KYC_CHECK_ID' + '}', String(KYC_CHECK_ID))
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200AddKycCheck.');
        }
        // verify required parameter 'KYC_CHECK_ID' is not null or undefined
        if (KYC_CHECK_ID === null || KYC_CHECK_ID === undefined) {
            throw new Error('Required parameter KYC_CHECK_ID was null or undefined when calling func200AddKycCheck.');
        }
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200AddKycCheck.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200AddKycCheck.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add KYC Document.
     * &lt;p&gt;Add a KYC document for the customer specified by CUSTOMER_ID. KYC Documents contain the document type (e.g. passport), place of issue, expiry etc. &lt;/p&gt;
     * @param body BANK_BODY
     * @param KYC_DOCUMENT_ID The kyc document id
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycDocumentWithHttpInfo = function (body, KYC_DOCUMENT_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/customers/${CUSTOMER_ID}/kyc_documents/${KYC_DOCUMENT_ID}'
            .replace('${' + 'KYC_DOCUMENT_ID' + '}', String(KYC_DOCUMENT_ID))
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200AddKycDocument.');
        }
        // verify required parameter 'KYC_DOCUMENT_ID' is not null or undefined
        if (KYC_DOCUMENT_ID === null || KYC_DOCUMENT_ID === undefined) {
            throw new Error('Required parameter KYC_DOCUMENT_ID was null or undefined when calling func200AddKycDocument.');
        }
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200AddKycDocument.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200AddKycDocument.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add KYC Media.
     * &lt;p&gt;Add some KYC media for the customer specified by CUSTOMER_ID. KYC Media resources relate to KYC Documents and KYC Checks and contain media urls for scans of passports, utility bills etc.&lt;/p&gt;
     * @param body BANK_BODY
     * @param KYC_MEDIA_ID The kyc media id
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycMediaWithHttpInfo = function (body, KYC_MEDIA_ID, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/customers/${CUSTOMER_ID}/kyc_media/${KYC_MEDIA_ID}'
            .replace('${' + 'KYC_MEDIA_ID' + '}', String(KYC_MEDIA_ID))
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200AddKycMedia.');
        }
        // verify required parameter 'KYC_MEDIA_ID' is not null or undefined
        if (KYC_MEDIA_ID === null || KYC_MEDIA_ID === undefined) {
            throw new Error('Required parameter KYC_MEDIA_ID was null or undefined when calling func200AddKycMedia.');
        }
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200AddKycMedia.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200AddKycMedia.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add KYC Status
     * &lt;p&gt;Add a kyc_status for the customer specified by CUSTOMER_ID. KYC Status is a timeline of the KYC status of the customer&lt;/p&gt;
     * @param body BANK_BODY
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddKycStatusWithHttpInfo = function (body, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/customers/${CUSTOMER_ID}/kyc_statuses'
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200AddKycStatus.');
        }
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200AddKycStatus.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200AddKycStatus.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add Social Media Handle
     * &lt;p&gt;Add a social media handle for the customer specified by CUSTOMER_ID.&lt;/p&gt;
     * @param body BANK_BODY
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AddSocialMediaHandleWithHttpInfo = function (body, CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/customers/${CUSTOMER_ID}/social_media_handles'
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200AddSocialMediaHandle.');
        }
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200AddSocialMediaHandle.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200AddSocialMediaHandle.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Accounts at one Bank (Public and Private).
     * &lt;p&gt;Get accounts at one bank that the user has access to (Authenticated + Anonymous access). Returns the list of accounts at BANK_ID that the user has access to. For each account the API returns the account ID and the available views.&lt;/p&gt;&lt;p&gt;If the user is not authenticated, the list will contain only the accounts providing public views. Authentication is Optional&lt;/p&gt;
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200AllAccountsAtOneBankWithHttpInfo = function (BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200AllAccountsAtOneBank.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create Meeting (video conference/call)
     * &lt;p&gt;Create Meeting: Initiate a video conference/call with the bank.&lt;/p&gt;&lt;p&gt;The Meetings resource contains meta data about video/other conference sessions, not the video/audio/chat itself.&lt;/p&gt;&lt;p&gt;The actual conferencing is handled by external providers. Currently OBP supports tokbox video conferences (WIP).&lt;/p&gt;&lt;p&gt;This is not a recomendation of tokbox per se.&lt;/p&gt;&lt;p&gt;provider_id determines the provider of the meeting / video chat service. MUST be url friendly (no spaces).&lt;/p&gt;&lt;p&gt;purpose_id explains the purpose of the chat. onboarding | mortgage | complaint etc. MUST be url friendly (no spaces).&lt;/p&gt;&lt;p&gt;Login is required.&lt;/p&gt;&lt;p&gt;This call is &lt;strong&gt;experimental&lt;/strong&gt;. Currently staff_user_id is not set. Further calls will be needed to correctly set this.&lt;/p&gt;
     * @param body BANK_BODY
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200CreateMeetingWithHttpInfo = function (body, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/meetings'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200CreateMeeting.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200CreateMeeting.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create User.
     * &lt;p&gt;Creates OBP user.  No authorisation (currently) required.&lt;/p&gt;&lt;p&gt;Mimics current webform to Register.&lt;/p&gt;&lt;p&gt;Requires username(email) and password.&lt;/p&gt;&lt;p&gt;Returns 409 error if username not unique.&lt;/p&gt;&lt;p&gt;May require validation of email address.&lt;/p&gt;
     * @param body BANK_BODY
     */
    Func_2_0_0Service.prototype.func200CreateUserWithHttpInfo = function (body, extraHttpRequestParams) {
        var path = this.basePath + '/users';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200CreateUser.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create User Customer Link.
     * &lt;p&gt;Link a User to a Customer&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;CanCreateUserCustomerLink OR CanCreateUserCustomerLinkAtAnyBank entitlements are required.&lt;/p&gt;
     * @param body BANK_BODY
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200CreateUserCustomerLinksWithHttpInfo = function (body, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/user_customer_links'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func200CreateUserCustomerLinks.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200CreateUserCustomerLinks.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete Entitlement
     * &lt;p&gt;Delete Entitlement specified by ENTITLEMENT_ID for an user specified by USER_ID&lt;/p&gt;&lt;p&gt;Authentication is required and the user needs to be a Super Admin. Super Admins are listed in the Props file.&lt;/p&gt;
     * @param ENTITLEMENT_ID The entitblement id
     * @param USER_ID The user id
     */
    Func_2_0_0Service.prototype.func200DeleteEntitlementWithHttpInfo = function (ENTITLEMENT_ID, USER_ID, extraHttpRequestParams) {
        var path = this.basePath + '/users/${USER_ID}/entitlement/${ENTITLEMENT_ID}'
            .replace('${' + 'ENTITLEMENT_ID' + '}', String(ENTITLEMENT_ID))
            .replace('${' + 'USER_ID' + '}', String(USER_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ENTITLEMENT_ID' is not null or undefined
        if (ENTITLEMENT_ID === null || ENTITLEMENT_ID === undefined) {
            throw new Error('Required parameter ENTITLEMENT_ID was null or undefined when calling func200DeleteEntitlement.');
        }
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func200DeleteEntitlement.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get all Entitlements
     * &lt;p&gt;Login is required.&lt;/p&gt;
     */
    Func_2_0_0Service.prototype.func200GetAllEntitlementsWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/entitlements';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get User (Current)
     * &lt;p&gt;Get the logged in user&lt;/p&gt;&lt;p&gt;Login is required.&lt;/p&gt;
     */
    Func_2_0_0Service.prototype.func200GetCurrentUserWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/users/current';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Entitlements specified by USER_ID
     * &lt;p&gt;Login is required.&lt;/p&gt;
     * @param USER_ID The user id
     */
    Func_2_0_0Service.prototype.func200GetEntitlementsWithHttpInfo = function (USER_ID, extraHttpRequestParams) {
        var path = this.basePath + '/users/${USER_ID}/entitlements'
            .replace('${' + 'USER_ID' + '}', String(USER_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func200GetEntitlements.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get KYC Checks for current Customer
     * &lt;p&gt;Get KYC checks for the logged in customer Messages sent to the currently authenticated user.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycChecksWithHttpInfo = function (CUSTOMER_ID, extraHttpRequestParams) {
        var path = this.basePath + '/customers/${CUSTOMER_ID}/kyc_checks'
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200GetKycChecks.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get KYC Documents for Customer
     * &lt;p&gt;Get KYC (know your customer) documents for a customer Get a list of documents that affirm the identity of the customer Passport, driving licence etc. Authentication is Optional&lt;/p&gt;
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycDocumentsWithHttpInfo = function (CUSTOMER_ID, extraHttpRequestParams) {
        var path = this.basePath + '/customers/${CUSTOMER_ID}/kyc_documents'
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200GetKycDocuments.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get KYC Media for a customer
     * &lt;p&gt;Get KYC media (scans, pictures, videos) that affirms the identity of the customer.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycMediaWithHttpInfo = function (CUSTOMER_ID, extraHttpRequestParams) {
        var path = this.basePath + '/customers/${CUSTOMER_ID}/kyc_media'
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200GetKycMedia.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get the KYC statuses for a customer
     * &lt;p&gt;Get the KYC statuses for a customer over time&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
     * @param CUSTOMER_ID The customer id
     */
    Func_2_0_0Service.prototype.func200GetKycStatusesWithHttpInfo = function (CUSTOMER_ID, extraHttpRequestParams) {
        var path = this.basePath + '/customers/${CUSTOMER_ID}/kyc_statuses'
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200GetKycStatuses.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Meeting
     * &lt;p&gt;Get Meeting specified by BANK_ID / MEETING_ID Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.&lt;/p&gt;&lt;p&gt;The actual conference/chats are handled by external services.&lt;/p&gt;&lt;p&gt;Login is required.&lt;/p&gt;&lt;p&gt;This call is &lt;strong&gt;experimental&lt;/strong&gt; and will require further authorisation in the future.&lt;/p&gt;
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetMeetingWithHttpInfo = function (BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/meetings/MEETING_ID'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200GetMeeting.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Meetings
     * &lt;p&gt;Meetings contain meta data about, and are used to facilitate, video conferences / chats etc.&lt;/p&gt;&lt;p&gt;The actual conference/chats are handled by external services.&lt;/p&gt;&lt;p&gt;Login is required.&lt;/p&gt;&lt;p&gt;This call is &lt;strong&gt;experimental&lt;/strong&gt; and will require further authorisation in the future.&lt;/p&gt;
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetMeetingsWithHttpInfo = function (BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/meetings'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200GetMeetings.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get access for specific user.
     * &lt;p&gt;Returns the list of the views at BANK_ID for account ACCOUNT_ID that a USER_ID at their provider PROVIDER_ID has access to. All url parameters must be &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Percent-encoding\&quot;&gt;%-encoded&lt;/a&gt;, which is often especially relevant for USER_ID and PROVIDER_ID.&lt;/p&gt;&lt;p&gt;OAuth authentication is required and the user needs to have access to the owner view.&lt;/p&gt;
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetPermissionForUserForBankAccountWithHttpInfo = function (PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/permissions/${PROVIDER_ID}/${USER_ID}'
            .replace('${' + 'PROVIDER_ID' + '}', String(PROVIDER_ID))
            .replace('${' + 'USER_ID' + '}', String(USER_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'PROVIDER_ID' is not null or undefined
        if (PROVIDER_ID === null || PROVIDER_ID === undefined) {
            throw new Error('Required parameter PROVIDER_ID was null or undefined when calling func200GetPermissionForUserForBankAccount.');
        }
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func200GetPermissionForUserForBankAccount.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func200GetPermissionForUserForBankAccount.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200GetPermissionForUserForBankAccount.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get access.
     * &lt;p&gt;Returns the list of the permissions at BANK_ID for account ACCOUNT_ID, with each time a pair composed of the user and the views that he has access to.&lt;/p&gt;&lt;p&gt;OAuth authentication is required and the user needs to have access to the owner view.&lt;/p&gt;
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetPermissionsForBankAccountWithHttpInfo = function (ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/permissions'
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func200GetPermissionsForBankAccount.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200GetPermissionsForBankAccount.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get social media handles for a customer
     * &lt;p&gt;Get social media handles for a customer.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
     * @param CUSTOMER_ID The customer id
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetSocialMediaHandlesWithHttpInfo = function (CUSTOMER_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/customers/${CUSTOMER_ID}/social_media_handles'
            .replace('${' + 'CUSTOMER_ID' + '}', String(CUSTOMER_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'CUSTOMER_ID' is not null or undefined
        if (CUSTOMER_ID === null || CUSTOMER_ID === undefined) {
            throw new Error('Required parameter CUSTOMER_ID was null or undefined when calling func200GetSocialMediaHandles.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200GetSocialMediaHandles.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Transaction Types offered by the bank
     * &lt;p&gt;Get Transaction Types for the bank specified by BANK_ID:&lt;/p&gt;&lt;p&gt;Lists the possible Transaction Types available at the bank (as opposed to Transaction Request Types which are the possible ways Transactions can be created by this API Server).&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;id : Unique transaction type id across the API instance. SHOULD be a UUID. MUST be unique.&lt;/li&gt;  &lt;li&gt;bank_id : The bank that supports this TransactionType&lt;/li&gt;  &lt;li&gt;short_code : A short code (SHOULD have no-spaces) which MUST be unique across the bank. May be stored with Transactions to link here&lt;/li&gt;  &lt;li&gt;summary : A succinct summary&lt;/li&gt;  &lt;li&gt;description : A longer description&lt;/li&gt;  &lt;li&gt;charge : The charge to the customer for each one of these&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Authentication is Optional&lt;/p&gt;
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200GetTransactionTypesWithHttpInfo = function (BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/transaction-types'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200GetTransactionTypes.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get private accounts at one bank (Authenticated access).
     * &lt;p&gt;Returns the list of private (non-public) accounts at BANK_ID that the user has access to. For each account the API returns the ID and the available views.&lt;/p&gt;&lt;p&gt;If you want to see more information on the Views, use the Account Detail call. If you want less information about the account, use the /my accounts call&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200PrivateAccountsAtOneBankWithHttpInfo = function (BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/private'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200PrivateAccountsAtOneBank.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Public Accounts at all Banks.
     * &lt;p&gt;Get public accounts at all banks (Anonymous access). Returns accounts that contain at least one public view (a view where is_public is true) For each account the API returns the ID and the available views.&lt;/p&gt;&lt;p&gt;Authentication is Optional&lt;/p&gt;
     */
    Func_2_0_0Service.prototype.func200PublicAccountsAllBanksWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/accounts/public';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Accounts at Bank (Public)
     * &lt;p&gt;Returns a list of the public accounts (Anonymous access) at BANK_ID. For each account the API returns the ID and the available views.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is not required.&lt;/p&gt;
     * @param BANK_ID The bank id
     */
    Func_2_0_0Service.prototype.func200PublicAccountsAtOneBankWithHttpInfo = function (BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/public'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func200PublicAccountsAtOneBank.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return Func_2_0_0Service;
}());
export { Func_2_0_0Service };
Func_2_0_0Service.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Func_2_0_0Service.ctorParameters = function () { return [
    { type: Http, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
    { type: Configuration, decorators: [{ type: Optional },] },
]; };
//# sourceMappingURL=func200.service.js.map