/**
 * Open Bank Project API
 * An Open Source API for Banks. (c) TESOBE Ltd. 2011 - 2016. Licensed under the AGPL and commercial licences.
 *
 * OpenAPI spec version: v3.0.0
 * Contact: contact@tesobe.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http, Headers, URLSearchParams } from '@angular/http';
import { RequestMethod, RequestOptions } from '@angular/http';
import '../rxjs-operators';
import { BASE_PATH } from '../variables';
import { Configuration } from '../configuration';
var Func_1_2_1Service = (function () {
    function Func_1_2_1Service(http, basePath, configuration) {
        this.http = http;
        this.basePath = 'https://apc.openbankproject.com/obp/v3.0.0';
        this.defaultHeaders = new Headers();
        this.configuration = new Configuration();
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }
    /**
     *
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    Func_1_2_1Service.prototype.extendObj = function (objA, objB) {
        for (var key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    };
    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    Func_1_2_1Service.prototype.canConsumeForm = function (consumes) {
        var form = 'multipart/form-data';
        for (var _i = 0, consumes_1 = consumes; _i < consumes_1.length; _i++) {
            var consume = consumes_1[_i];
            if (form === consume) {
                return true;
            }
        }
        return false;
    };
    /**
     * <p>Posts a comment about a transaction TRANSACTION_ID on a <a href=\"#1_2_1-getViewsForBankAccount\">view</a> VIEW_ID.</p><p>${authenticationRequiredMessage(false)}</p><p>Authentication is required since the comment is linked with the user.</p>
     * @summary Add comment.
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCommentForViewOnTransaction = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCommentForViewOnTransactionWithHttpInfo(body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add the geolocation of the counterparty's registered address</p>
     * @summary Add Corporate Location to Counterparty
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyCorporateLocation = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCounterpartyCorporateLocationWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add a url that points to the logo of the counterparty</p>
     * @summary Add image url to other bank account.
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyImageUrl = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCounterpartyImageUrlWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add a description of the counter party from the perpestive of the account e.g. My dentist.</p>
     * @summary Add Counterparty More Info
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyMoreInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCounterpartyMoreInfoWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add open corporates url to other bank account.</p>
     * @summary Add Open Corporates URL to Counterparty
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyOpenCorporatesUrl = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCounterpartyOpenCorporatesUrlWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Add geocoordinates of the counterparty's main location</p>
     * @summary Add physical location to other bank account.
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyPhysicalLocation = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCounterpartyPhysicalLocationWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Creates the public alias for the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional Authentication is required if the view is not public.</p><p>Note: Public aliases are automatically generated for new 'other accounts / counterparties', so this call should only be used if the public alias was deleted.</p><p>The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.</p>
     * @summary Add public alias to other bank account.
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyPublicAlias = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCounterpartyPublicAliasWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>A url which represents the counterparty (home page url etc.)</p>
     * @summary Add url to other bank account.
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyUrl = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddCounterpartyUrlWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Posts an image about a transaction TRANSACTION_ID on a <a href=\"#1_2_1-getViewsForBankAccount\">view</a> VIEW_ID.</p><p>Authentication is Mandatory</p><p>The image is linked with the user.</p>
     * @summary Add an image.
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddImageForViewOnTransaction = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddImageForViewOnTransactionWithHttpInfo(body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Creates a private alias for the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Create Other Account Private Alias
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddOtherAccountPrivateAlias = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddOtherAccountPrivateAliasWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Grants the user USER_ID at their provider PROVIDER_ID access to a list of views at BANK_ID for account ACCOUNT_ID.</p><p>All url parameters must be <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\">%-encoded</a>, which is often especially relevant for USER_ID and PROVIDER_ID.</p><p>OAuth authentication is required and the user needs to have access to the owner view.</p>
     * @summary Grant User access to a list of views.
     * @param body BANK_BODY
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddPermissionForUserForBankAccountForMultipleViews = function (body, PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddPermissionForUserForBankAccountForMultipleViewsWithHttpInfo(body, PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Grants the user USER_ID at their provider PROVIDER_ID access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID. All url parameters must be <a href=\"http://en.wikipedia.org/wiki/Percent-encoding\">%-encoded</a>, which is often especially relevant for USER_ID and PROVIDER_ID.</p><p>OAuth authentication is required and the user needs to have access to the owner view.</p><p>Granting access to a public view will return an error message, as the user already has access.</p>
     * @summary Grant User access to View.
     * @param body BANK_BODY
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddPermissionForUserForBankAccountForOneView = function (body, PROVIDER_ID, USER_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddPermissionForUserForBankAccountForOneViewWithHttpInfo(body, PROVIDER_ID, USER_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Posts a tag about a transaction TRANSACTION_ID on a <a href=\"#1_2_1-getViewsForBankAccount\">view</a> VIEW_ID.</p><p>Authentication is Mandatory</p><p>Authentication is required as the tag is linked with the user.</p>
     * @summary Add a tag.
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddTagForViewOnTransaction = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddTagForViewOnTransactionWithHttpInfo(body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Creates a description of the transaction TRANSACTION_ID.</p><p>Note: Unlike other items of metadata, there is only one \"narrative\" per transaction accross all views. If you set narrative via a view e.g. view-x it will be seen via view-y (as long as view-y has permission to see the narrative).</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Add narrative.
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddTransactionNarrative = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddTransactionNarrativeWithHttpInfo(body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Creates a \"where\" Geo tag on a transaction TRANSACTION_ID in a <a href=\"#1_2_1-getViewsForBankAccount\">view</a>.</p><p>Authentication is Mandatory</p><p>The geo tag is linked with the user.</p>
     * @summary Add where tag.
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddWhereTagForViewOnTransaction = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121AddWhereTagForViewOnTransactionWithHttpInfo(body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get the bank specified by BANK_ID Returns information about a single bank specified by BANK_ID including:</p><ul>  <li>Short and full name of bank</li>  <li>Logo URL</li>  <li>Website</li></ul>
     * @summary Get Bank
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121BankById = function (BANK_ID, extraHttpRequestParams) {
        return this.func121BankByIdWithHttpInfo(BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Delete the comment COMMENT_ID about the transaction TRANSACTION_ID made on <a href=\"#1_2_1-getViewsForBankAccount\">view</a>.</p><p>Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the comment.</p>
     * @summary Delete comment.
     * @param COMMENT_ID The comment id
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCommentForViewOnTransaction = function (COMMENT_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCommentForViewOnTransactionWithHttpInfo(COMMENT_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Delete corporate location of other bank account. Delete the geolocation of the counterparty's registered address</p>
     * @summary Delete Counterparty Corporate Location.
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyCorporateLocation = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyCorporateLocationWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Delete image url of other bank account.</p>
     * @summary Delete Counterparty Image URL
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyImageUrl = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyImageUrlWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * @summary Delete more info of other bank account.
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyMoreInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyMoreInfoWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Delete open corporate url of other bank account.</p>
     * @summary Delete Counterparty Open Corporates URL
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyOpenCorporatesUrl = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyOpenCorporatesUrlWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Delete physical location of other bank account.</p>
     * @summary Delete Counterparty Physical Location.
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyPhysicalLocation = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyPhysicalLocationWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Deletes the private alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Delete Counterparty Private Alias
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyPrivateAlias = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyPrivateAliasWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Deletes the public alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Delete Counterparty Public Alias
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyPublicAlias = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyPublicAliasWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     *
     * @summary Delete url of other bank account.
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyUrl = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteCounterpartyUrlWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Deletes the image IMAGE_ID about the transaction TRANSACTION_ID made on <a href=\"#1_2_1-getViewsForBankAccount\">view</a>.</p><p>Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the image.</p>
     * @summary Delete an image
     * @param IMAGE_ID The image id
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteImageForViewOnTransaction = function (IMAGE_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteImageForViewOnTransactionWithHttpInfo(IMAGE_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Deletes the tag TAG_ID about the transaction TRANSACTION_ID made on <a href=\"#1_2_1-getViewsForBankAccount\">view</a>.</p><p>Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the tag.</p>
     * @summary Delete a tag.
     * @param TAG_ID The tag id
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteTagForViewOnTransaction = function (TAG_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteTagForViewOnTransactionWithHttpInfo(TAG_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Deletes the description of the transaction TRANSACTION_ID.</p><p>Authentication via OAuth is required if the view is not public.</p>
     * @summary Delete narrative.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteTransactionNarrative = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteTransactionNarrativeWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Deletes the view specified by VIEW_ID on the bank account specified by ACCOUNT_ID at bank BANK_ID.</p>
     * @summary Delete View
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteViewForBankAccount = function (VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteViewForBankAccountWithHttpInfo(VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Deletes the where tag of the transaction TRANSACTION_ID made on <a href=\"#1_2_1-getViewsForBankAccount\">view</a>.</p><p>Authentication is Mandatory</p><p>The user must either have owner privileges for this account, or must be the user that posted the geo tag.</p>
     * @summary Delete where tag.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteWhereTagForViewOnTransaction = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121DeleteWhereTagForViewOnTransactionWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get banks on this API instance Returns a list of banks supported on this server:</p><ul>  <li>ID used as parameter in URLs</li>  <li>Short and full name of bank</li>  <li>Logo URL</li>  <li>Website</li></ul>
     * @summary Get Banks
     */
    Func_1_2_1Service.prototype.func121GetBanks = function (extraHttpRequestParams) {
        return this.func121GetBanksWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the transaction TRANSACTION_ID comments made on a <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).</p><p>Authentication via OAuth is required if the view is not public.</p>
     * @summary Get comments.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetCommentsForViewOnTransaction = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetCommentsForViewOnTransactionWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the public alias of the other account OTHER_ACCOUNT_ID. Authentication is Optional OAuth authentication is required if the view is not public.</p>
     * @summary Get public alias of other bank account.
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetCounterpartyPublicAlias = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetCounterpartyPublicAliasWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the transaction TRANSACTION_ID images made on a <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).  Authentication via OAuth is required if the view is not public.</p>
     * @summary Get images.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetImagesForViewOnTransaction = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetImagesForViewOnTransactionWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID. Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Get Other Account by Id.
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountByIdForBankAccount = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetOtherAccountByIdForBankAccountWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get other account of a transaction. Returns details of the other party involved in the transaction, moderated by the <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).  Authentication via OAuth is required if the view is not public.</p>
     * @summary Get Other Account of Transaction
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountForTransaction = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetOtherAccountForTransactionWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Get metadata of one other account. Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.</p><p>Authentication via OAuth is required if the view is not public.</p>
     * @summary Get Other Account Metadata.
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountMetadata = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetOtherAccountMetadataWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the private alias of the other account OTHER_ACCOUNT_ID.</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Get Other Account Private Alias
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountPrivateAlias = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetOtherAccountPrivateAliasWithHttpInfo(OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID. Authentication is Optional Authentication is required if the view VIEW_ID is not public.</p>
     * @summary Get Other Accounts of one Account.
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountsForBankAccount = function (VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetOtherAccountsForBankAccountWithHttpInfo(VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the transaction TRANSACTION_ID tags made on a <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID).  Authentication via OAuth is required if the view is not public.</p>
     * @summary Get tags.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetTagsForViewOnTransaction = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetTagsForViewOnTransactionWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns one transaction specified by TRANSACTION_ID of the account ACCOUNT_ID and <a href=\"#1_2_1-getViewsForBankAccount\">moderated</a> by the view (VIEW_ID).</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Get Transaction by Id.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetTransactionByIdForBankAccount = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetTransactionByIdForBankAccountWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the account owner description of the transaction <a href=\"#1_2_1-getViewsForBankAccount\">moderated</a> by the view.</p><p>Authentication via OAuth is required if the view is not public.</p>
     * @summary Get narrative.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetTransactionNarrative = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetTransactionNarrativeWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns the \"where\" Geo tag added to the transaction TRANSACTION_ID made on a <a href=\"#1_2_1-getViewsForBankAccount\">view</a> (VIEW_ID). It represents the location where the transaction has been initiated.</p><p>Authentication via OAuth is required if the view is not public.</p>
     * @summary Get where tag.
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetWhereTagForViewOnTransaction = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121GetWhereTagForViewOnTransactionWithHttpInfo(TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Revokes the user USER_ID at their provider PROVIDER_ID access to all the views at BANK_ID for account ACCOUNT_ID.</p><p>OAuth authentication is required and the user needs to have access to the owner view.</p>
     * @summary Revoke access to all Views on Account
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121RemovePermissionForUserForBankAccountForAllViews = function (PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121RemovePermissionForUserForBankAccountForAllViewsWithHttpInfo(PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Revokes the user USER_ID at their provider PROVIDER_ID access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.</p><p>Revoking a user access to a public view will return an error message.</p><p>OAuth authentication is required and the user needs to have access to the owner view.</p>
     * @summary Revoke access to one View.
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121RemovePermissionForUserForBankAccountForOneView = function (PROVIDER_ID, USER_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121RemovePermissionForUserForBankAccountForOneViewWithHttpInfo(PROVIDER_ID, USER_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Returns information about:</p><ul>  <li>API version</li>  <li>Hosted by information</li>  <li>Git Commit</li></ul>
     * @summary The root of the API
     */
    Func_1_2_1Service.prototype.func121Root = function (extraHttpRequestParams) {
        return this.func121RootWithHttpInfo(extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Update the label for the account. The label is how the account is known to the account owner e.g. 'My savings account' </p>
     * @summary Update Account Label.
     * @param body BANK_BODY
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateAccountLabel = function (body, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateAccountLabelWithHttpInfo(body, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Update the geolocation of the counterparty's registered address</p>
     * @summary Update Counterparty Corporate Location
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyCorporateLocation = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyCorporateLocationWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Update the url that points to the logo of the counterparty</p>
     * @summary Update Counterparty Image Url
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyImageUrl = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyImageUrlWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Update the more info description of the counter party from the perpestive of the account e.g. My dentist.</p>
     * @summary Update Counterparty More Info
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyMoreInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyMoreInfoWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Update open corporate url of other bank account.</p>
     * @summary Update Open Corporates Url of Counterparty
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyOpenCorporatesUrl = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyOpenCorporatesUrlWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Update geocoordinates of the counterparty's main location</p>
     * @summary Update Counterparty Physical Location
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyPhysicalLocation = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyPhysicalLocationWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Update Counterparty Private Alias
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyPrivateAlias = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyPrivateAliasWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.</p><p>Authentication is Optional Authentication is required if the view is not public.</p>
     * @summary Update public alias of other bank account.
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyPublicAlias = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyPublicAliasWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>A url which represents the counterparty (home page url etc.)</p>
     * @summary Update url of other bank account.
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyUrl = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateCounterpartyUrlWithHttpInfo(body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Updates the description of the transaction TRANSACTION_ID.</p><p>Authentication via OAuth is required if the view is not public.</p>
     * @summary Update narrative.
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateTransactionNarrative = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateTransactionNarrativeWithHttpInfo(body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * <p>Updates the \"where\" Geo tag on a transaction TRANSACTION_ID in a <a href=\"#1_2_1-getViewsForBankAccount\">view</a>.</p><p>Authentication is Mandatory</p><p>The geo tag is linked with the user.</p>
     * @summary Update where tag.
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateWhereTagForViewOnTransaction = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        return this.func121UpdateWhereTagForViewOnTransactionWithHttpInfo(body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json() || {};
            }
        });
    };
    /**
     * Add comment.
     * &lt;p&gt;Posts a comment about a transaction TRANSACTION_ID on a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; VIEW_ID.&lt;/p&gt;&lt;p&gt;${authenticationRequiredMessage(false)}&lt;/p&gt;&lt;p&gt;Authentication is required since the comment is linked with the user.&lt;/p&gt;
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCommentForViewOnTransactionWithHttpInfo = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/comments'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCommentForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121AddCommentForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCommentForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCommentForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCommentForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add Corporate Location to Counterparty
     * &lt;p&gt;Add the geolocation of the counterparty&#39;s registered address&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyCorporateLocationWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/corporate_location'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCounterpartyCorporateLocation.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddCounterpartyCorporateLocation.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCounterpartyCorporateLocation.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCounterpartyCorporateLocation.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCounterpartyCorporateLocation.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add image url to other bank account.
     * &lt;p&gt;Add a url that points to the logo of the counterparty&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyImageUrlWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/image_url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCounterpartyImageUrl.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddCounterpartyImageUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCounterpartyImageUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCounterpartyImageUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCounterpartyImageUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add Counterparty More Info
     * &lt;p&gt;Add a description of the counter party from the perpestive of the account e.g. My dentist.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyMoreInfoWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/more_info'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCounterpartyMoreInfo.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddCounterpartyMoreInfo.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCounterpartyMoreInfo.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCounterpartyMoreInfo.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCounterpartyMoreInfo.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add Open Corporates URL to Counterparty
     * &lt;p&gt;Add open corporates url to other bank account.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyOpenCorporatesUrlWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/open_corporates_url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCounterpartyOpenCorporatesUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add physical location to other bank account.
     * &lt;p&gt;Add geocoordinates of the counterparty&#39;s main location&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyPhysicalLocationWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/physical_location'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCounterpartyPhysicalLocation.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add public alias to other bank account.
     * &lt;p&gt;Creates the public alias for the other account OTHER_ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;&lt;p&gt;Note: Public aliases are automatically generated for new &#39;other accounts / counterparties&#39;, so this call should only be used if the public alias was deleted.&lt;/p&gt;&lt;p&gt;The VIEW_ID parameter should be a view the caller is permitted to access to and that has permission to create public aliases.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyPublicAliasWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/public_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCounterpartyPublicAlias.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddCounterpartyPublicAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCounterpartyPublicAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCounterpartyPublicAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCounterpartyPublicAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add url to other bank account.
     * &lt;p&gt;A url which represents the counterparty (home page url etc.)&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddCounterpartyUrlWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddCounterpartyUrl.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddCounterpartyUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddCounterpartyUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddCounterpartyUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddCounterpartyUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add an image.
     * &lt;p&gt;Posts an image about a transaction TRANSACTION_ID on a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; VIEW_ID.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;The image is linked with the user.&lt;/p&gt;
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddImageForViewOnTransactionWithHttpInfo = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/images'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddImageForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121AddImageForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddImageForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddImageForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddImageForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create Other Account Private Alias
     * &lt;p&gt;Creates a private alias for the other account OTHER_ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddOtherAccountPrivateAliasWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/private_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddOtherAccountPrivateAlias.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121AddOtherAccountPrivateAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddOtherAccountPrivateAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddOtherAccountPrivateAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddOtherAccountPrivateAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Grant User access to a list of views.
     * &lt;p&gt;Grants the user USER_ID at their provider PROVIDER_ID access to a list of views at BANK_ID for account ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;All url parameters must be &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Percent-encoding\&quot;&gt;%-encoded&lt;/a&gt;, which is often especially relevant for USER_ID and PROVIDER_ID.&lt;/p&gt;&lt;p&gt;OAuth authentication is required and the user needs to have access to the owner view.&lt;/p&gt;
     * @param body BANK_BODY
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddPermissionForUserForBankAccountForMultipleViewsWithHttpInfo = function (body, PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/permissions/${PROVIDER_ID}/${USER_ID}/views'
            .replace('${' + 'PROVIDER_ID' + '}', String(PROVIDER_ID))
            .replace('${' + 'USER_ID' + '}', String(USER_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddPermissionForUserForBankAccountForMultipleViews.');
        }
        // verify required parameter 'PROVIDER_ID' is not null or undefined
        if (PROVIDER_ID === null || PROVIDER_ID === undefined) {
            throw new Error('Required parameter PROVIDER_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForMultipleViews.');
        }
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForMultipleViews.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForMultipleViews.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForMultipleViews.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Grant User access to View.
     * &lt;p&gt;Grants the user USER_ID at their provider PROVIDER_ID access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID. All url parameters must be &lt;a href&#x3D;\&quot;http://en.wikipedia.org/wiki/Percent-encoding\&quot;&gt;%-encoded&lt;/a&gt;, which is often especially relevant for USER_ID and PROVIDER_ID.&lt;/p&gt;&lt;p&gt;OAuth authentication is required and the user needs to have access to the owner view.&lt;/p&gt;&lt;p&gt;Granting access to a public view will return an error message, as the user already has access.&lt;/p&gt;
     * @param body BANK_BODY
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddPermissionForUserForBankAccountForOneViewWithHttpInfo = function (body, PROVIDER_ID, USER_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/permissions/${PROVIDER_ID}/${USER_ID}/views/${VIEW_ID}'
            .replace('${' + 'PROVIDER_ID' + '}', String(PROVIDER_ID))
            .replace('${' + 'USER_ID' + '}', String(USER_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddPermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'PROVIDER_ID' is not null or undefined
        if (PROVIDER_ID === null || PROVIDER_ID === undefined) {
            throw new Error('Required parameter PROVIDER_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddPermissionForUserForBankAccountForOneView.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add a tag.
     * &lt;p&gt;Posts a tag about a transaction TRANSACTION_ID on a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; VIEW_ID.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;Authentication is required as the tag is linked with the user.&lt;/p&gt;
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddTagForViewOnTransactionWithHttpInfo = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/tags'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddTagForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121AddTagForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddTagForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddTagForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddTagForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add narrative.
     * &lt;p&gt;Creates a description of the transaction TRANSACTION_ID.&lt;/p&gt;&lt;p&gt;Note: Unlike other items of metadata, there is only one \&quot;narrative\&quot; per transaction accross all views. If you set narrative via a view e.g. view-x it will be seen via view-y (as long as view-y has permission to see the narrative).&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddTransactionNarrativeWithHttpInfo = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/narrative'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddTransactionNarrative.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121AddTransactionNarrative.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddTransactionNarrative.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddTransactionNarrative.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddTransactionNarrative.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Add where tag.
     * &lt;p&gt;Creates a \&quot;where\&quot; Geo tag on a transaction TRANSACTION_ID in a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;The geo tag is linked with the user.&lt;/p&gt;
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121AddWhereTagForViewOnTransactionWithHttpInfo = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/where'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121AddWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121AddWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121AddWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121AddWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121AddWhereTagForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Bank
     * &lt;p&gt;Get the bank specified by BANK_ID Returns information about a single bank specified by BANK_ID including:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;Short and full name of bank&lt;/li&gt;  &lt;li&gt;Logo URL&lt;/li&gt;  &lt;li&gt;Website&lt;/li&gt;&lt;/ul&gt;
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121BankByIdWithHttpInfo = function (BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}'
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121BankById.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete comment.
     * &lt;p&gt;Delete the comment COMMENT_ID about the transaction TRANSACTION_ID made on &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the comment.&lt;/p&gt;
     * @param COMMENT_ID The comment id
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCommentForViewOnTransactionWithHttpInfo = function (COMMENT_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/comments/${COMMENT_ID}'
            .replace('${' + 'COMMENT_ID' + '}', String(COMMENT_ID))
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'COMMENT_ID' is not null or undefined
        if (COMMENT_ID === null || COMMENT_ID === undefined) {
            throw new Error('Required parameter COMMENT_ID was null or undefined when calling func121DeleteCommentForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121DeleteCommentForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCommentForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCommentForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCommentForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete Counterparty Corporate Location.
     * &lt;p&gt;Delete corporate location of other bank account. Delete the geolocation of the counterparty&#39;s registered address&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyCorporateLocationWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/corporate_location'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyCorporateLocation.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyCorporateLocation.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyCorporateLocation.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyCorporateLocation.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete Counterparty Image URL
     * &lt;p&gt;Delete image url of other bank account.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyImageUrlWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/image_url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyImageUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyImageUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyImageUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyImageUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete more info of other bank account.
     *
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyMoreInfoWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/more_info'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyMoreInfo.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyMoreInfo.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyMoreInfo.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyMoreInfo.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete Counterparty Open Corporates URL
     * &lt;p&gt;Delete open corporate url of other bank account.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyOpenCorporatesUrlWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/open_corporates_url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyOpenCorporatesUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete Counterparty Physical Location.
     * &lt;p&gt;Delete physical location of other bank account.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyPhysicalLocationWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/physical_location'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyPhysicalLocation.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete Counterparty Private Alias
     * &lt;p&gt;Deletes the private alias of the other account OTHER_ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyPrivateAliasWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/private_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyPrivateAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyPrivateAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyPrivateAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyPrivateAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete Counterparty Public Alias
     * &lt;p&gt;Deletes the public alias of the other account OTHER_ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyPublicAliasWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/public_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyPublicAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyPublicAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyPublicAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyPublicAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete url of other bank account.
     *
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteCounterpartyUrlWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteCounterpartyUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteCounterpartyUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteCounterpartyUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete an image
     * &lt;p&gt;Deletes the image IMAGE_ID about the transaction TRANSACTION_ID made on &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the image.&lt;/p&gt;
     * @param IMAGE_ID The image id
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteImageForViewOnTransactionWithHttpInfo = function (IMAGE_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/images/${IMAGE_ID}'
            .replace('${' + 'IMAGE_ID' + '}', String(IMAGE_ID))
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'IMAGE_ID' is not null or undefined
        if (IMAGE_ID === null || IMAGE_ID === undefined) {
            throw new Error('Required parameter IMAGE_ID was null or undefined when calling func121DeleteImageForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121DeleteImageForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteImageForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteImageForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteImageForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete a tag.
     * &lt;p&gt;Deletes the tag TAG_ID about the transaction TRANSACTION_ID made on &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required. The user must either have owner privileges for this account, or must be the user that posted the tag.&lt;/p&gt;
     * @param TAG_ID The tag id
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteTagForViewOnTransactionWithHttpInfo = function (TAG_ID, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/tags/${TAG_ID}'
            .replace('${' + 'TAG_ID' + '}', String(TAG_ID))
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TAG_ID' is not null or undefined
        if (TAG_ID === null || TAG_ID === undefined) {
            throw new Error('Required parameter TAG_ID was null or undefined when calling func121DeleteTagForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121DeleteTagForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteTagForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteTagForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteTagForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete narrative.
     * &lt;p&gt;Deletes the description of the transaction TRANSACTION_ID.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteTransactionNarrativeWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/narrative'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121DeleteTransactionNarrative.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteTransactionNarrative.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteTransactionNarrative.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteTransactionNarrative.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete View
     * &lt;p&gt;Deletes the view specified by VIEW_ID on the bank account specified by ACCOUNT_ID at bank BANK_ID.&lt;/p&gt;
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteViewForBankAccountWithHttpInfo = function (VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/views/${VIEW_ID}'
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteViewForBankAccount.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteViewForBankAccount.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteViewForBankAccount.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Delete where tag.
     * &lt;p&gt;Deletes the where tag of the transaction TRANSACTION_ID made on &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;The user must either have owner privileges for this account, or must be the user that posted the geo tag.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121DeleteWhereTagForViewOnTransactionWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/where'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121DeleteWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121DeleteWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121DeleteWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121DeleteWhereTagForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Banks
     * &lt;p&gt;Get banks on this API instance Returns a list of banks supported on this server:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;ID used as parameter in URLs&lt;/li&gt;  &lt;li&gt;Short and full name of bank&lt;/li&gt;  &lt;li&gt;Logo URL&lt;/li&gt;  &lt;li&gt;Website&lt;/li&gt;&lt;/ul&gt;
     */
    Func_1_2_1Service.prototype.func121GetBanksWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/banks';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get comments.
     * &lt;p&gt;Returns the transaction TRANSACTION_ID comments made on a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; (VIEW_ID).&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetCommentsForViewOnTransactionWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/comments'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121GetCommentsForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetCommentsForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetCommentsForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetCommentsForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get public alias of other bank account.
     * &lt;p&gt;Returns the public alias of the other account OTHER_ACCOUNT_ID. Authentication is Optional OAuth authentication is required if the view is not public.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetCounterpartyPublicAliasWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/public_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121GetCounterpartyPublicAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetCounterpartyPublicAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetCounterpartyPublicAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetCounterpartyPublicAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get images.
     * &lt;p&gt;Returns the transaction TRANSACTION_ID images made on a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; (VIEW_ID).  Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetImagesForViewOnTransactionWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/images'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121GetImagesForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetImagesForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetImagesForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetImagesForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Other Account by Id.
     * &lt;p&gt;Returns data about the Other Account that has shared at least one transaction with ACCOUNT_ID at BANK_ID. Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountByIdForBankAccountWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121GetOtherAccountByIdForBankAccount.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetOtherAccountByIdForBankAccount.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetOtherAccountByIdForBankAccount.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetOtherAccountByIdForBankAccount.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Other Account of Transaction
     * &lt;p&gt;Get other account of a transaction. Returns details of the other party involved in the transaction, moderated by the &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; (VIEW_ID).  Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountForTransactionWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/other_account'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121GetOtherAccountForTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetOtherAccountForTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetOtherAccountForTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetOtherAccountForTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Other Account Metadata.
     * &lt;p&gt;Get metadata of one other account. Returns only the metadata about one other bank account (OTHER_ACCOUNT_ID) that had shared at least one transaction with ACCOUNT_ID at BANK_ID.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountMetadataWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121GetOtherAccountMetadata.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetOtherAccountMetadata.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetOtherAccountMetadata.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetOtherAccountMetadata.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Other Account Private Alias
     * &lt;p&gt;Returns the private alias of the other account OTHER_ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountPrivateAliasWithHttpInfo = function (OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/private_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121GetOtherAccountPrivateAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetOtherAccountPrivateAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetOtherAccountPrivateAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetOtherAccountPrivateAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Other Accounts of one Account.
     * &lt;p&gt;Returns data about all the other accounts that have shared at least one transaction with the ACCOUNT_ID at BANK_ID. Authentication is Optional Authentication is required if the view VIEW_ID is not public.&lt;/p&gt;
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetOtherAccountsForBankAccountWithHttpInfo = function (VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts'
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetOtherAccountsForBankAccount.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetOtherAccountsForBankAccount.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetOtherAccountsForBankAccount.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get tags.
     * &lt;p&gt;Returns the transaction TRANSACTION_ID tags made on a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; (VIEW_ID).  Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetTagsForViewOnTransactionWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/tags'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121GetTagsForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetTagsForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetTagsForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetTagsForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get Transaction by Id.
     * &lt;p&gt;Returns one transaction specified by TRANSACTION_ID of the account ACCOUNT_ID and &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;moderated&lt;/a&gt; by the view (VIEW_ID).&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetTransactionByIdForBankAccountWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/transaction'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121GetTransactionByIdForBankAccount.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetTransactionByIdForBankAccount.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetTransactionByIdForBankAccount.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetTransactionByIdForBankAccount.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get narrative.
     * &lt;p&gt;Returns the account owner description of the transaction &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;moderated&lt;/a&gt; by the view.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetTransactionNarrativeWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/narrative'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121GetTransactionNarrative.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetTransactionNarrative.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetTransactionNarrative.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetTransactionNarrative.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get where tag.
     * &lt;p&gt;Returns the \&quot;where\&quot; Geo tag added to the transaction TRANSACTION_ID made on a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt; (VIEW_ID). It represents the location where the transaction has been initiated.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121GetWhereTagForViewOnTransactionWithHttpInfo = function (TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/where'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121GetWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121GetWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121GetWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121GetWhereTagForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Revoke access to all Views on Account
     * &lt;p&gt;Revokes the user USER_ID at their provider PROVIDER_ID access to all the views at BANK_ID for account ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;OAuth authentication is required and the user needs to have access to the owner view.&lt;/p&gt;
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121RemovePermissionForUserForBankAccountForAllViewsWithHttpInfo = function (PROVIDER_ID, USER_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/permissions/${PROVIDER_ID}/${USER_ID}/views'
            .replace('${' + 'PROVIDER_ID' + '}', String(PROVIDER_ID))
            .replace('${' + 'USER_ID' + '}', String(USER_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'PROVIDER_ID' is not null or undefined
        if (PROVIDER_ID === null || PROVIDER_ID === undefined) {
            throw new Error('Required parameter PROVIDER_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForAllViews.');
        }
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForAllViews.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForAllViews.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForAllViews.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Revoke access to one View.
     * &lt;p&gt;Revokes the user USER_ID at their provider PROVIDER_ID access to the view VIEW_ID at BANK_ID for account ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Revoking a user access to a public view will return an error message.&lt;/p&gt;&lt;p&gt;OAuth authentication is required and the user needs to have access to the owner view.&lt;/p&gt;
     * @param PROVIDER_ID The provider id
     * @param USER_ID The user id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121RemovePermissionForUserForBankAccountForOneViewWithHttpInfo = function (PROVIDER_ID, USER_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/permissions/${PROVIDER_ID}/${USER_ID}/views/${VIEW_ID}'
            .replace('${' + 'PROVIDER_ID' + '}', String(PROVIDER_ID))
            .replace('${' + 'USER_ID' + '}', String(USER_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'PROVIDER_ID' is not null or undefined
        if (PROVIDER_ID === null || PROVIDER_ID === undefined) {
            throw new Error('Required parameter PROVIDER_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'USER_ID' is not null or undefined
        if (USER_ID === null || USER_ID === undefined) {
            throw new Error('Required parameter USER_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForOneView.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121RemovePermissionForUserForBankAccountForOneView.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * The root of the API
     * &lt;p&gt;Returns information about:&lt;/p&gt;&lt;ul&gt;  &lt;li&gt;API version&lt;/li&gt;  &lt;li&gt;Hosted by information&lt;/li&gt;  &lt;li&gt;Git Commit&lt;/li&gt;&lt;/ul&gt;
     */
    Func_1_2_1Service.prototype.func121RootWithHttpInfo = function (extraHttpRequestParams) {
        var path = this.basePath + '/root';
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        var requestOptions = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Account Label.
     * &lt;p&gt;Update the label for the account. The label is how the account is known to the account owner e.g. &#39;My savings account&#39; &lt;/p&gt;
     * @param body BANK_BODY
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateAccountLabelWithHttpInfo = function (body, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}'
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateAccountLabel.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateAccountLabel.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateAccountLabel.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Counterparty Corporate Location
     * &lt;p&gt;Update the geolocation of the counterparty&#39;s registered address&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyCorporateLocationWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/corporate_location'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyCorporateLocation.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyCorporateLocation.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyCorporateLocation.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyCorporateLocation.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyCorporateLocation.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Counterparty Image Url
     * &lt;p&gt;Update the url that points to the logo of the counterparty&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyImageUrlWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/image_url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyImageUrl.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyImageUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyImageUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyImageUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyImageUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Counterparty More Info
     * &lt;p&gt;Update the more info description of the counter party from the perpestive of the account e.g. My dentist.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyMoreInfoWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/more_info'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyMoreInfo.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyMoreInfo.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyMoreInfo.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyMoreInfo.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyMoreInfo.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Open Corporates Url of Counterparty
     * &lt;p&gt;Update open corporate url of other bank account.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyOpenCorporatesUrlWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/open_corporates_url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyOpenCorporatesUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyOpenCorporatesUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Counterparty Physical Location
     * &lt;p&gt;Update geocoordinates of the counterparty&#39;s main location&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyPhysicalLocationWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/physical_location'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyPhysicalLocation.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyPhysicalLocation.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update Counterparty Private Alias
     * &lt;p&gt;Updates the private alias of the counterparty (AKA other account) OTHER_ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyPrivateAliasWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/private_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyPrivateAlias.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyPrivateAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyPrivateAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyPrivateAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyPrivateAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update public alias of other bank account.
     * &lt;p&gt;Updates the public alias of the other account / counterparty OTHER_ACCOUNT_ID.&lt;/p&gt;&lt;p&gt;Authentication is Optional Authentication is required if the view is not public.&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyPublicAliasWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/public_alias'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyPublicAlias.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyPublicAlias.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyPublicAlias.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyPublicAlias.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyPublicAlias.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update url of other bank account.
     * &lt;p&gt;A url which represents the counterparty (home page url etc.)&lt;/p&gt;
     * @param body BANK_BODY
     * @param OTHER_ACCOUNT_ID The other account id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateCounterpartyUrlWithHttpInfo = function (body, OTHER_ACCOUNT_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/other_accounts/${OTHER_ACCOUNT_ID}/metadata/url'
            .replace('${' + 'OTHER_ACCOUNT_ID' + '}', String(OTHER_ACCOUNT_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateCounterpartyUrl.');
        }
        // verify required parameter 'OTHER_ACCOUNT_ID' is not null or undefined
        if (OTHER_ACCOUNT_ID === null || OTHER_ACCOUNT_ID === undefined) {
            throw new Error('Required parameter OTHER_ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyUrl.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateCounterpartyUrl.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateCounterpartyUrl.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateCounterpartyUrl.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update narrative.
     * &lt;p&gt;Updates the description of the transaction TRANSACTION_ID.&lt;/p&gt;&lt;p&gt;Authentication via OAuth is required if the view is not public.&lt;/p&gt;
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateTransactionNarrativeWithHttpInfo = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/narrative'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateTransactionNarrative.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121UpdateTransactionNarrative.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateTransactionNarrative.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateTransactionNarrative.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateTransactionNarrative.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update where tag.
     * &lt;p&gt;Updates the \&quot;where\&quot; Geo tag on a transaction TRANSACTION_ID in a &lt;a href&#x3D;\&quot;#1_2_1-getViewsForBankAccount\&quot;&gt;view&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Authentication is Mandatory&lt;/p&gt;&lt;p&gt;The geo tag is linked with the user.&lt;/p&gt;
     * @param body BANK_BODY
     * @param TRANSACTION_ID The transaction id
     * @param VIEW_ID The view id
     * @param ACCOUNT_ID The account id
     * @param BANK_ID The bank id
     */
    Func_1_2_1Service.prototype.func121UpdateWhereTagForViewOnTransactionWithHttpInfo = function (body, TRANSACTION_ID, VIEW_ID, ACCOUNT_ID, BANK_ID, extraHttpRequestParams) {
        var path = this.basePath + '/banks/${BANK_ID}/accounts/${ACCOUNT_ID}/${VIEW_ID}/transactions/${TRANSACTION_ID}/metadata/where'
            .replace('${' + 'TRANSACTION_ID' + '}', String(TRANSACTION_ID))
            .replace('${' + 'VIEW_ID' + '}', String(VIEW_ID))
            .replace('${' + 'ACCOUNT_ID' + '}', String(ACCOUNT_ID))
            .replace('${' + 'BANK_ID' + '}', String(BANK_ID));
        var queryParameters = new URLSearchParams();
        var headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling func121UpdateWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'TRANSACTION_ID' is not null or undefined
        if (TRANSACTION_ID === null || TRANSACTION_ID === undefined) {
            throw new Error('Required parameter TRANSACTION_ID was null or undefined when calling func121UpdateWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'VIEW_ID' is not null or undefined
        if (VIEW_ID === null || VIEW_ID === undefined) {
            throw new Error('Required parameter VIEW_ID was null or undefined when calling func121UpdateWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'ACCOUNT_ID' is not null or undefined
        if (ACCOUNT_ID === null || ACCOUNT_ID === undefined) {
            throw new Error('Required parameter ACCOUNT_ID was null or undefined when calling func121UpdateWhereTagForViewOnTransaction.');
        }
        // verify required parameter 'BANK_ID' is not null or undefined
        if (BANK_ID === null || BANK_ID === undefined) {
            throw new Error('Required parameter BANK_ID was null or undefined when calling func121UpdateWhereTagForViewOnTransaction.');
        }
        // to determine the Accept header
        var produces = [];
        // authentication (directLogin) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body),
            search: queryParameters,
            withCredentials: this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return Func_1_2_1Service;
}());
export { Func_1_2_1Service };
Func_1_2_1Service.decorators = [
    { type: Injectable },
];
/** @nocollapse */
Func_1_2_1Service.ctorParameters = function () { return [
    { type: Http, },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [BASE_PATH,] },] },
    { type: Configuration, decorators: [{ type: Optional },] },
]; };
//# sourceMappingURL=func121.service.js.map